!function(){return function e(s,t,i){function n(l,o){if(!t[l]){if(!s[l]){var a="function"==typeof require&&require;if(!o&&a)return a(l,!0);if(r)return r(l,!0);var c=new Error("Cannot find module '"+l+"'");throw c.code="MODULE_NOT_FOUND",c}var m=t[l]={exports:{}};s[l][0].call(m.exports,function(e){return n(s[l][1][e]||e)},m,m.exports,e,s,t,i)}return t[l].exports}for(var r="function"==typeof require&&require,l=0;l<i.length;l++)n(i[l]);return n}}()({1:[function(e,s,t){const i=e("csp-app/components/startpage");document.addEventListener("DOMContentLoaded",function(e){!function(e){0==window.location.pathname.substring(1).length&&e.load(i.fragment)}(new n("#app"))});const n=function(e){this.selector=e,this.elem=document.querySelector(e)};n.prototype.load=function(e){this.elem.innerHTML="",this.elem.appendChild(e)}},{"csp-app/components/startpage":6}],2:[function(e,s,t){const{Form:i,FormElem:n}=e("csp-app/libs/forms"),{minLength:r,maxLength:l}=e("csp-app/libs/forms/utilities/validators"),o=r(4),a=new i({name:"signup-client",html:'\n        <form>\n            <div class="inputs"></div>\n            <div class="actions">\n                <input type="submit" value="Sign Up">\n            </div>\n        </form>\n    ',elems:[new n({html:'\n        <div class="input-block clearfix">\n            \n            <input type="text" id="signup-client-login" placeholder="Login" />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"},validators:[{handler:o,message:"The length is less than 4 chars"},{handler:l(16),message:"The length is more than 16 chars"}]}),new n({html:'\n        <div class="input-block clearfix">\n            <input type="password" id="signup-client-password" placeholder="Password" />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"},validators:[{handler:o,message:"The length is less than 4 chars"}]}),new n({html:'\n        <div class="input-block clearfix">\n            \n            <input type="password" id="signup-client-passwordconf" placeholder="Confirm password" />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"},validators:[{handler:o,message:"The length is less than 4 chars"}]}),new n({html:'\n        <div class="input-block clearfix">\n            \n            <input type="password" id="signup-client-org" placeholder="Organization" />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"}})],whereToPut:".inputs",submit:{handler:()=>{}}});s.exports=a},{"csp-app/libs/forms":9,"csp-app/libs/forms/utilities/validators":10}],3:[function(e,s,t){const{Form:i,FormElem:n}=e("csp-app/libs/forms"),{minLength:r,maxLength:l}=e("csp-app/libs/forms/utilities/validators"),o=r(4),a=new i({name:"signup-exec",html:'\n        <form>\n            <div class="inputs"></div>\n            <div class="actions">\n                <input type="submit" value="Sign Up">\n            </div>\n        </form>\n    ',elems:{login:new n({html:'\n        <div class="input-block clearfix">\n            \n            <input type="text" id="signup-exec-login" placeholder="Login" />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"},validators:[{handler:o,message:"The length is less than 4 chars"},{handler:l(16),message:"The length is more than 16 chars"}]}),pw:new n({html:'\n        <div class="input-block clearfix">\n            \n            <input type="password" id="signup-exec-password" placeholder="Password" />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"},validators:[{handler:o,message:"The length is less than 4 chars"}]}),pwConf:new n({html:'\n        <div class="input-block clearfix">\n            \n            <input type="password" id="signup-exec-passwordconf" placeholder="Confirm password"  />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"},validators:[{handler:o,message:"The length is less than 4 chars"}]})},whereToPut:".inputs",submit:{handler:e=>{console.log("hello");const s=new XMLHttpRequest,t={login:e.login.value,passwordElem:e.pw.value};console.log(t),s.addEventListener("load",function(e){console.log(this.responseText)}),s.open("POST","/api/getData",!0),s.setRequestHeader("Content-Type","application/json"),s.send(JSON.stringify(t))}}});s.exports=a},{"csp-app/libs/forms":9,"csp-app/libs/forms/utilities/validators":10}],4:[function(e,s,t){const i=e("./loginform"),n=e("./execform"),r=e("./clientform");s.exports={LoginForm:i,SignupExecForm:n,SignupClientForm:r}},{"./clientform":2,"./execform":3,"./loginform":5}],5:[function(e,s,t){const{Form:i,FormElem:n}=e("csp-app/libs/forms"),{minLength:r,maxLength:l}=e("csp-app/libs/forms/utilities/validators"),o=r(4),a=new i({name:"login",html:'\n        <form>\n            <div class="inputs"></div>\n            <div class="actions">\n                <input type="submit" value="Log in">\n            </div>\n        </form>\n    ',elems:{login:new n({html:'\n        <div class="input-block">\n            \n            <input type="text" id="login-login" placeholder="Login" />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"},validators:[{handler:o,message:"The length is less than 4 chars"},{handler:l(16),message:"The length is more than 16 chars"}]}),pw:new n({html:'\n        <div class="input-block clearfix">\n            \n            <input type="password" id="login-password" placeholder="Password" />\n        </div>\n        <div class="formelem-errors"></div>',input:{selector:".input-block input",value:null},errors:{elemClass:"formelem-errors"},validators:[{handler:o,message:"The length is less than 4 chars"}]})},whereToPut:".inputs",submit:{handler:e=>{const s=new XMLHttpRequest;s.addEventListener("load",function(e){console.log("we re loginning")}),s.open("POST","/api/login",!0),s.setRequestHeader("Content-Type","application/json"),s.send(JSON.stringify({login:e.login,pw:e.pw}))}}});s.exports=a},{"csp-app/libs/forms":9,"csp-app/libs/forms/utilities/validators":10}],6:[function(e,s,t){const{LoginForm:i,SignupClientForm:n,SignupExecForm:r}=e("./forms"),l="display-none",o=function(){this.html='\n        <div class="wrapper">\n            <div class="startpage">\n                <div class="logo-block">\n                    <h1>Welcome to Consulting Services Platform</h1>\n                </div>\n\n                <div class="main-actions">\n                    <button id="login-switch">Log in</button>\n                    <button id="signup-switch">Sign up</button>\n                </div>\n\n                \n                <div class="login" id="login">\n                    <div class="header"><h2>Log in</h2></div>\n                    <div class="login-form form"></div>\n                </div>\n                \n                \n                <div class="signup" id="signup">\n                    <div class="tab-actions clearfix">\n                        <button id="client-switch">Sign up as client</button>\n                        <button id="exec-switch">Sign up as executor</button>\n                    </div>\n\n                    <div class="signup-form" id="signup-form">\n                        <div class="client-form form" id="client-form"></div>\n                        <div class="exec-form form" id="exec-form"></div>\n                    </div>\n                </div>\n                \n            </div>\n        </div>\n    ',this.forms={[i.name]:i,[n.name]:n,[r.name]:r},this.fragment=this.createDOM(this.html),this.whereToPut={[i.name]:".login-form",[n.name]:".client-form",[r.name]:".exec-form"},this.elems={loginBtn:this.fragment.querySelector("#login-switch"),signupBtn:this.fragment.querySelector("#signup-switch"),loginPart:this.fragment.querySelector("#login"),signupPart:this.fragment.querySelector("#signup"),clientBtn:this.fragment.querySelector("#client-switch"),execBtn:this.fragment.querySelector("#exec-switch"),clientPart:this.fragment.querySelector("#client-form"),execPart:this.fragment.querySelector("#exec-form"),signupTab1:this.fragment.querySelector("#signup .tab-actions button:first-child"),signupTab2:this.fragment.querySelector("#signup .tab-actions button:last-child"),signupPartForm:this.fragment.querySelector("#signup-form")},this.insertForms(),this.initializeEvents(),this.setDefaultState()};o.prototype.createDOM=function(e){const s=document.createDocumentFragment(),t=document.createElement("div");return t.innerHTML=e,Array.prototype.slice.call(t.children).forEach(e=>s.appendChild(e)),s},o.prototype.insertForms=function(){Object.keys(this.whereToPut).forEach(e=>{this.fragment.querySelector(this.whereToPut[e]).appendChild(this.forms[e].fragment)})},o.prototype.initializeEvents=function(){this.elems.loginBtn.addEventListener("click",e=>{this.elems.loginPart.classList.remove(l),this.elems.signupPart.classList.add(l),this.elems.loginBtn.classList.add("active"),this.elems.signupBtn.classList.remove("active")}),this.elems.signupBtn.addEventListener("click",e=>{this.elems.signupPart.classList.remove(l),this.elems.loginPart.classList.add(l),this.elems.signupBtn.classList.add("active"),this.elems.loginBtn.classList.remove("active")}),this.elems.clientBtn.addEventListener("click",e=>{this.elems.clientPart.classList.remove(l),this.elems.execPart.classList.add(l),this.elems.clientBtn.classList.add("active"),this.elems.execBtn.classList.remove("active")}),this.elems.execBtn.addEventListener("click",e=>{this.elems.execPart.classList.remove(l),this.elems.clientPart.classList.add(l),this.elems.execBtn.classList.add("active"),this.elems.clientBtn.classList.remove("active")}),this.elems.signupTab1.addEventListener("click",()=>{this.elems.signupTab1.classList.add("active"),this.elems.signupTab2.classList.remove("active"),this.elems.signupPartForm.classList.add("first-tab-active"),this.elems.signupPartForm.classList.remove("last-tab-active")}),this.elems.signupTab2.addEventListener("click",()=>{this.elems.signupTab2.classList.add("active"),this.elems.signupTab1.classList.remove("active"),this.elems.signupPartForm.classList.add("last-tab-active"),this.elems.signupPartForm.classList.remove("first-tab-active")})},o.prototype.setDefaultState=function(){this.elems.signupPart.classList.add(l),this.elems.execPart.classList.add(l),this.elems.loginBtn.classList.add("active"),this.elems.clientBtn.classList.add("active"),this.elems.signupTab1.classList.add("active"),this.elems.signupPartForm.classList.add("first-tab-active")},s.exports=new o},{"./forms":4}],7:[function(e,s,t){const i=function(e){this.name=e.name,this.html=e.html,this.elems=e.elems,this.fragment=this.createDOM(),this.whereToPut=e.whereToPut||"form",this.submit={selector:e.submit.selector||'input[type="submit"]',handler:e.submit.handler||function(){}},this.insertElems(),this.initializeEvents()};i.prototype.createDOM=function(){const e=document.createDocumentFragment(),s=document.createElement("div");return s.innerHTML=this.html,Array.prototype.slice.call(s.children).forEach(s=>e.appendChild(s)),e},i.prototype.insertElems=function(){const e=this.fragment.querySelector(this.whereToPut);Object.values(this.elems).forEach(s=>e.appendChild(s.fragment))},i.prototype.initializeEvents=function(){this.fragment.querySelector(this.submit.selector).addEventListener("click",e=>{e.preventDefault(),this.submit.handler(this.elems)})},s.exports=i},{}],8:[function(e,s,t){const i=function(e){this.value=e.input.value||null,this.fragment=this.createDOM(e.html),this.elem=this.fragment.querySelector(e.input.selector)||null,this.validators=e.validators||[],this.errors={elem:this.fragment.querySelector("."+e.errors.elemClass)||null,hidingClass:e.errors.hidingClass||".none",messages:[]},this.initializeEvents()};i.prototype.createDOM=function(e){const s=document.createDocumentFragment(),t=document.createElement("div");return t.innerHTML=e,Array.prototype.slice.call(t.children).forEach(e=>s.appendChild(e)),s},i.prototype.initializeEvents=function(){this.elem.addEventListener("change",e=>{if(this.errors.messages=[],this.validators.forEach(e=>{e.handler(this.elem.value)||this.errors.messages.push(e.message)}),0==this.errors.messages.length)return this.hideErrors(),this.errors.elem.innerHTML="",console.log(e.target.value),void(this.value=e.target.value);this.listErrors(),this.showErrors()})},i.prototype.showErrors=function(){this.errors.elem.classList.contains(this.errors.hidingClass)&&this.errors.elem.classList.remove(this.errors.hidingClass)},i.prototype.hideErrors=function(){this.errors.elem.classList.contains(this.errors.hidingClass)||this.errors.elem.classList.add(this.errors.hidingClass)},i.prototype.listErrors=function(){const e=document.createDocumentFragment();this.errors.messages.forEach(s=>{const t=document.createElement("li");t.textContent=s,e.appendChild(t)}),this.errors.elem.innerHTML="",this.errors.elem.appendChild(e)},s.exports=i},{}],9:[function(e,s,t){const i=e("csp-app/libs/forms/Form"),n=e("csp-app/libs/forms/FormElem");s.exports={Form:i,FormElem:n}},{"csp-app/libs/forms/Form":7,"csp-app/libs/forms/FormElem":8}],10:[function(e,s,t){s.exports={minLength:function(e){return function(s){return s.toString().length>=e}},maxLength:function(e){return function(s){return s.toString().length<=e}}}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvdXJjZS5qcyJdLCJuYW1lcyI6WyJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJmIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJTdGFydFBhZ2UiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJyb290RWxlbSIsIndpbmRvdyIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJzdWJzdHJpbmciLCJsb2FkIiwiZnJhZ21lbnQiLCJpbml0aWFsaXplIiwiUm9vdCIsInNlbGVjdG9yIiwidGhpcyIsImVsZW0iLCJxdWVyeVNlbGVjdG9yIiwicHJvdG90eXBlIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJjc3AtYXBwL2NvbXBvbmVudHMvc3RhcnRwYWdlIiwiMiIsIkZvcm0iLCJGb3JtRWxlbSIsIm1pbkxlbmd0aCIsIm1pbkxlbmd0aEdlbmVyaWMiLCJtYXhMZW5ndGgiLCJtYXhMZW5ndGhHZW5lcmljIiwiU2lnbnVwQ2xpZW50Rm9ybSIsIm5hbWUiLCJodG1sIiwiZWxlbXMiLCJpbnB1dCIsInZhbHVlIiwiZXJyb3JzIiwiZWxlbUNsYXNzIiwidmFsaWRhdG9ycyIsImhhbmRsZXIiLCJtZXNzYWdlIiwid2hlcmVUb1B1dCIsInN1Ym1pdCIsImNzcC1hcHAvbGlicy9mb3JtcyIsImNzcC1hcHAvbGlicy9mb3Jtcy91dGlsaXRpZXMvdmFsaWRhdG9ycyIsIjMiLCJTaWdudXBFeGVjRm9ybSIsImxvZ2luIiwicHciLCJwd0NvbmYiLCJjb25zb2xlIiwibG9nIiwiaHR0cCIsIlhNTEh0dHBSZXF1ZXN0IiwicmVnRGF0YSIsInBhc3N3b3JkRWxlbSIsInJlc3BvbnNlVGV4dCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCI0IiwiTG9naW5Gb3JtIiwiLi9jbGllbnRmb3JtIiwiLi9leGVjZm9ybSIsIi4vbG9naW5mb3JtIiwiNSIsIjYiLCJoaWRlQ2xhc3MiLCJmb3JtcyIsIltvYmplY3QgT2JqZWN0XSIsImNyZWF0ZURPTSIsImxvZ2luQnRuIiwic2lnbnVwQnRuIiwibG9naW5QYXJ0Iiwic2lnbnVwUGFydCIsImNsaWVudEJ0biIsImV4ZWNCdG4iLCJjbGllbnRQYXJ0IiwiZXhlY1BhcnQiLCJzaWdudXBUYWIxIiwic2lnbnVwVGFiMiIsInNpZ251cFBhcnRGb3JtIiwiaW5zZXJ0Rm9ybXMiLCJpbml0aWFsaXplRXZlbnRzIiwic2V0RGVmYXVsdFN0YXRlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInRtcEVsZW0iLCJjcmVhdGVFbGVtZW50IiwiQXJyYXkiLCJzbGljZSIsImNoaWxkcmVuIiwiZm9yRWFjaCIsIk9iamVjdCIsImtleXMiLCJmb3JtTmFtZSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsIi4vZm9ybXMiLCI3Iiwic2V0dGluZ3MiLCJpbnNlcnRFbGVtcyIsInBsYWNlIiwidmFsdWVzIiwicHJldmVudERlZmF1bHQiLCI4IiwiaGlkaW5nQ2xhc3MiLCJtZXNzYWdlcyIsInZhbGlkYXRvciIsInB1c2giLCJoaWRlRXJyb3JzIiwidGFyZ2V0IiwibGlzdEVycm9ycyIsInNob3dFcnJvcnMiLCJjb250YWlucyIsImVycm9yIiwibGkiLCJ0ZXh0Q29udGVudCIsIjkiLCJjc3AtYXBwL2xpYnMvZm9ybXMvRm9ybSIsImNzcC1hcHAvbGlicy9mb3Jtcy9Gb3JtRWxlbSIsIjEwIiwibWluIiwic3RyIiwidG9TdHJpbmciLCJtYXgiXSwibWFwcGluZ3MiOiJDQUFBLFdBQStiLE9BQW5iLFNBQVNBLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsU0FBU0MsRUFBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLElBQUlFLEVBQUUsbUJBQW1CQyxTQUFTQSxRQUFRLElBQUlGLEdBQUdDLEVBQUUsT0FBT0EsRUFBRUYsR0FBRSxHQUFJ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bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuY29uc3QgU3RhcnRQYWdlID0gcmVxdWlyZSgnY3NwLWFwcC9jb21wb25lbnRzL3N0YXJ0cGFnZScpO1xuXG5jb25zdCBpbml0aWFsaXplID0gZnVuY3Rpb24ocm9vdEVsZW0pIHtcbiAgICBjb25zdCB1cmwgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKDEpO1xuICAgIFxuICAgIGlmICh1cmwubGVuZ3RoID09IDApIHtcbiAgICAgICAgcm9vdEVsZW0ubG9hZChTdGFydFBhZ2UuZnJhZ21lbnQpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhTdGFydFBhZ2UpXG4gICAgfVxufTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2dCkge1xuICAgIGNvbnN0IHJvb3RFbGVtID0gbmV3IFJvb3QoJyNhcHAnKTtcblxuICAgIGluaXRpYWxpemUocm9vdEVsZW0pOyAvLyBzaWRlIGVmZmVjdHNcblxufSk7XG5cbmNvbnN0IFJvb3QgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB0aGlzLmVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbn07XG5cblJvb3QucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbihlbGVtKSB7XG4gICAgdGhpcy5lbGVtLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZWxlbS5hcHBlbmRDaGlsZChlbGVtKTtcbn07XG5cblxufSx7XCJjc3AtYXBwL2NvbXBvbmVudHMvc3RhcnRwYWdlXCI6Nn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuY29uc3QgeyBGb3JtLCBGb3JtRWxlbSB9ID0gcmVxdWlyZSgnY3NwLWFwcC9saWJzL2Zvcm1zJyk7XG5jb25zdCB7IG1pbkxlbmd0aDogbWluTGVuZ3RoR2VuZXJpYywgbWF4TGVuZ3RoOiBtYXhMZW5ndGhHZW5lcmljIH0gPSByZXF1aXJlKCdjc3AtYXBwL2xpYnMvZm9ybXMvdXRpbGl0aWVzL3ZhbGlkYXRvcnMnKTtcbmNvbnN0IG1pbkxlbmd0aCA9IG1pbkxlbmd0aEdlbmVyaWMoNCk7XG5jb25zdCBtYXhMZW5ndGggPSBtYXhMZW5ndGhHZW5lcmljKDE2KTtcblxuY29uc3QgbG9naW5FbGVtID0gbmV3IEZvcm1FbGVtKHtcbiAgICBodG1sOiBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ibG9jayBjbGVhcmZpeFwiPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInNpZ251cC1jbGllbnQtbG9naW5cIiBwbGFjZWhvbGRlcj1cIkxvZ2luXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtZWxlbS1lcnJvcnNcIj48L2Rpdj5gXG4gICAgICAgICxcbiAgICBpbnB1dDogeyBzZWxlY3RvcjogJy5pbnB1dC1ibG9jayBpbnB1dCcsIHZhbHVlOiBudWxsIH0sXG4gICAgZXJyb3JzOiB7XG4gICAgICAgIGVsZW1DbGFzczogJ2Zvcm1lbGVtLWVycm9ycydcbiAgICB9LFxuICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaGFuZGxlcjogbWluTGVuZ3RoLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBsZW5ndGggaXMgbGVzcyB0aGFuIDQgY2hhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGhhbmRsZXI6IG1heExlbmd0aCxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgbGVuZ3RoIGlzIG1vcmUgdGhhbiAxNiBjaGFycydcbiAgICAgICAgfVxuICAgIF1cbn0pO1xuXG5jb25zdCBwYXNzd29yZEVsZW0gPSBuZXcgRm9ybUVsZW0oe1xuICAgIGh0bWw6IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWJsb2NrIGNsZWFyZml4XCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgaWQ9XCJzaWdudXAtY2xpZW50LXBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybWVsZW0tZXJyb3JzXCI+PC9kaXY+YCxcbiAgICBpbnB1dDogeyBzZWxlY3RvcjogJy5pbnB1dC1ibG9jayBpbnB1dCcsIHZhbHVlOiBudWxsIH0sXG4gICAgZXJyb3JzOiB7XG4gICAgICAgIGVsZW1DbGFzczogJ2Zvcm1lbGVtLWVycm9ycydcbiAgICB9LFxuICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaGFuZGxlcjogbWluTGVuZ3RoLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBsZW5ndGggaXMgbGVzcyB0aGFuIDQgY2hhcnMnXG4gICAgICAgIH1cbiAgICBdXG59KTtcblxuY29uc3QgcGFzc3dvcmRDb25mRWxlbSA9IG5ldyBGb3JtRWxlbSh7XG4gICAgaHRtbDogYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtYmxvY2sgY2xlYXJmaXhcIj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwic2lnbnVwLWNsaWVudC1wYXNzd29yZGNvbmZcIiBwbGFjZWhvbGRlcj1cIkNvbmZpcm0gcGFzc3dvcmRcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm1lbGVtLWVycm9yc1wiPjwvZGl2PmAsXG4gICAgaW5wdXQ6IHsgc2VsZWN0b3I6ICcuaW5wdXQtYmxvY2sgaW5wdXQnLCB2YWx1ZTogbnVsbCB9LFxuICAgIGVycm9yczoge1xuICAgICAgICBlbGVtQ2xhc3M6ICdmb3JtZWxlbS1lcnJvcnMnXG4gICAgfSxcbiAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGhhbmRsZXI6IG1pbkxlbmd0aCxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgbGVuZ3RoIGlzIGxlc3MgdGhhbiA0IGNoYXJzJ1xuICAgICAgICB9XG4gICAgXVxufSk7XG5cbmNvbnN0IG9yZ2FuaXphdGlvbiA9IG5ldyBGb3JtRWxlbSh7XG4gICAgaHRtbDogYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtYmxvY2sgY2xlYXJmaXhcIj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwic2lnbnVwLWNsaWVudC1vcmdcIiBwbGFjZWhvbGRlcj1cIk9yZ2FuaXphdGlvblwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybWVsZW0tZXJyb3JzXCI+PC9kaXY+YCxcbiAgICBpbnB1dDogeyBzZWxlY3RvcjogJy5pbnB1dC1ibG9jayBpbnB1dCcsIHZhbHVlOiBudWxsIH0sXG4gICAgZXJyb3JzOiB7XG4gICAgICAgIGVsZW1DbGFzczogJ2Zvcm1lbGVtLWVycm9ycydcbiAgICB9LFxufSk7XG5cbmNvbnN0IFNpZ251cENsaWVudEZvcm0gPSBuZXcgRm9ybSh7XG4gICAgbmFtZTogJ3NpZ251cC1jbGllbnQnLFxuICAgIGh0bWw6IGBcbiAgICAgICAgPGZvcm0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXRzXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJTaWduIFVwXCI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgIGAsXG4gICAgZWxlbXM6IFtsb2dpbkVsZW0sIHBhc3N3b3JkRWxlbSwgcGFzc3dvcmRDb25mRWxlbSwgb3JnYW5pemF0aW9uXSxcbiAgICB3aGVyZVRvUHV0OiAnLmlucHV0cycsXG4gICAgc3VibWl0OiB7XG4gICAgICAgIGhhbmRsZXI6ICgpID0+IHt9LFxuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ251cENsaWVudEZvcm07XG59LHtcImNzcC1hcHAvbGlicy9mb3Jtc1wiOjksXCJjc3AtYXBwL2xpYnMvZm9ybXMvdXRpbGl0aWVzL3ZhbGlkYXRvcnNcIjoxMH1dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuY29uc3QgeyBGb3JtLCBGb3JtRWxlbSB9ID0gcmVxdWlyZSgnY3NwLWFwcC9saWJzL2Zvcm1zJyk7XG5jb25zdCB7IG1pbkxlbmd0aDogbWluTGVuZ3RoR2VuZXJpYywgbWF4TGVuZ3RoOiBtYXhMZW5ndGhHZW5lcmljIH0gPSByZXF1aXJlKCdjc3AtYXBwL2xpYnMvZm9ybXMvdXRpbGl0aWVzL3ZhbGlkYXRvcnMnKTtcbmNvbnN0IG1pbkxlbmd0aCA9IG1pbkxlbmd0aEdlbmVyaWMoNCk7XG5jb25zdCBtYXhMZW5ndGggPSBtYXhMZW5ndGhHZW5lcmljKDE2KTtcblxuY29uc3QgbG9naW5FbGVtID0gbmV3IEZvcm1FbGVtKHtcbiAgICBodG1sOiBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ibG9jayBjbGVhcmZpeFwiPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cInNpZ251cC1leGVjLWxvZ2luXCIgcGxhY2Vob2xkZXI9XCJMb2dpblwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybWVsZW0tZXJyb3JzXCI+PC9kaXY+YCxcbiAgICBpbnB1dDogeyBzZWxlY3RvcjogJy5pbnB1dC1ibG9jayBpbnB1dCcsIHZhbHVlOiBudWxsIH0sXG4gICAgZXJyb3JzOiB7XG4gICAgICAgIGVsZW1DbGFzczogJ2Zvcm1lbGVtLWVycm9ycydcbiAgICB9LFxuICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaGFuZGxlcjogbWluTGVuZ3RoLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBsZW5ndGggaXMgbGVzcyB0aGFuIDQgY2hhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGhhbmRsZXI6IG1heExlbmd0aCxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgbGVuZ3RoIGlzIG1vcmUgdGhhbiAxNiBjaGFycydcbiAgICAgICAgfVxuICAgIF1cbn0pO1xuXG5jb25zdCBwYXNzd29yZEVsZW0gPSBuZXcgRm9ybUVsZW0oe1xuICAgIGh0bWw6IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWJsb2NrIGNsZWFyZml4XCI+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBpZD1cInNpZ251cC1leGVjLXBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybWVsZW0tZXJyb3JzXCI+PC9kaXY+YCxcbiAgICBpbnB1dDogeyBzZWxlY3RvcjogJy5pbnB1dC1ibG9jayBpbnB1dCcsIHZhbHVlOiBudWxsIH0sXG4gICAgZXJyb3JzOiB7XG4gICAgICAgIGVsZW1DbGFzczogJ2Zvcm1lbGVtLWVycm9ycydcbiAgICB9LFxuICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaGFuZGxlcjogbWluTGVuZ3RoLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBsZW5ndGggaXMgbGVzcyB0aGFuIDQgY2hhcnMnXG4gICAgICAgIH1cbiAgICBdXG59KTtcblxuY29uc3QgcGFzc3dvcmRDb25mRWxlbSA9IG5ldyBGb3JtRWxlbSh7XG4gICAgaHRtbDogYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtYmxvY2sgY2xlYXJmaXhcIj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwic2lnbnVwLWV4ZWMtcGFzc3dvcmRjb25mXCIgcGxhY2Vob2xkZXI9XCJDb25maXJtIHBhc3N3b3JkXCIgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybWVsZW0tZXJyb3JzXCI+PC9kaXY+YCxcbiAgICBpbnB1dDogeyBzZWxlY3RvcjogJy5pbnB1dC1ibG9jayBpbnB1dCcsIHZhbHVlOiBudWxsIH0sXG4gICAgZXJyb3JzOiB7XG4gICAgICAgIGVsZW1DbGFzczogJ2Zvcm1lbGVtLWVycm9ycydcbiAgICB9LFxuICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaGFuZGxlcjogbWluTGVuZ3RoLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBsZW5ndGggaXMgbGVzcyB0aGFuIDQgY2hhcnMnXG4gICAgICAgIH1cbiAgICBdXG59KTtcblxuY29uc3QgU2lnbnVwRXhlY0Zvcm0gPSBuZXcgRm9ybSh7XG4gICAgbmFtZTogJ3NpZ251cC1leGVjJyxcbiAgICBodG1sOiBgXG4gICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0c1wiPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwiU2lnbiBVcFwiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZm9ybT5cbiAgICBgLFxuICAgIGVsZW1zOiB7XG4gICAgICAgICdsb2dpbic6IGxvZ2luRWxlbSxcbiAgICAgICAgJ3B3JzogcGFzc3dvcmRFbGVtLFxuICAgICAgICAncHdDb25mJzogcGFzc3dvcmRDb25mRWxlbVxuICAgIH0sXG4gICAgd2hlcmVUb1B1dDogJy5pbnB1dHMnLFxuICAgIHN1Ym1pdDoge1xuICAgICAgICBoYW5kbGVyOiBlbGVtcyA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnaGVsbG8nKVxuXG4gICAgICAgICAgICBjb25zdCBodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlZ0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgbG9naW46IGVsZW1zWydsb2dpbiddLnZhbHVlLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkRWxlbTogZWxlbXNbJ3B3J10udmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZWdEYXRhKVxuXG4gICAgICAgICAgICBodHRwLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGh0dHAub3BlbignUE9TVCcsICcvYXBpL2dldERhdGEnLCB0cnVlKTtcbiAgICAgICAgICAgIGh0dHAuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICAgIGh0dHAuc2VuZChKU09OLnN0cmluZ2lmeShyZWdEYXRhKSk7XG5cbiAgICAgICAgfSxcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWdudXBFeGVjRm9ybTtcbn0se1wiY3NwLWFwcC9saWJzL2Zvcm1zXCI6OSxcImNzcC1hcHAvbGlicy9mb3Jtcy91dGlsaXRpZXMvdmFsaWRhdG9yc1wiOjEwfV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5jb25zdCBMb2dpbkZvcm0gPSByZXF1aXJlKCcuL2xvZ2luZm9ybScpO1xuY29uc3QgU2lnbnVwRXhlY0Zvcm0gPSByZXF1aXJlKCcuL2V4ZWNmb3JtJyk7XG5jb25zdCBTaWdudXBDbGllbnRGb3JtID0gcmVxdWlyZSgnLi9jbGllbnRmb3JtJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIExvZ2luRm9ybSxcbiAgICBTaWdudXBFeGVjRm9ybSxcbiAgICBTaWdudXBDbGllbnRGb3JtXG59O1xufSx7XCIuL2NsaWVudGZvcm1cIjoyLFwiLi9leGVjZm9ybVwiOjMsXCIuL2xvZ2luZm9ybVwiOjV9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmNvbnN0IHsgRm9ybSwgRm9ybUVsZW0gfSA9IHJlcXVpcmUoJ2NzcC1hcHAvbGlicy9mb3JtcycpO1xuY29uc3QgeyBtaW5MZW5ndGg6IG1pbkxlbmd0aEdlbmVyaWMsIG1heExlbmd0aDogbWF4TGVuZ3RoR2VuZXJpYyB9ID0gcmVxdWlyZSgnY3NwLWFwcC9saWJzL2Zvcm1zL3V0aWxpdGllcy92YWxpZGF0b3JzJyk7XG5jb25zdCBtaW5MZW5ndGggPSBtaW5MZW5ndGhHZW5lcmljKDQpO1xuY29uc3QgbWF4TGVuZ3RoID0gbWF4TGVuZ3RoR2VuZXJpYygxNik7XG5cbmNvbnN0IGxvZ2luRWxlbSA9IG5ldyBGb3JtRWxlbSh7XG4gICAgaHRtbDogYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtYmxvY2tcIj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJsb2dpbi1sb2dpblwiIHBsYWNlaG9sZGVyPVwiTG9naW5cIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm1lbGVtLWVycm9yc1wiPjwvZGl2PmAsXG4gICAgaW5wdXQ6IHsgc2VsZWN0b3I6ICcuaW5wdXQtYmxvY2sgaW5wdXQnLCB2YWx1ZTogbnVsbCB9LFxuICAgIGVycm9yczoge1xuICAgICAgICBlbGVtQ2xhc3M6ICdmb3JtZWxlbS1lcnJvcnMnXG4gICAgfSxcbiAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGhhbmRsZXI6IG1pbkxlbmd0aCxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgbGVuZ3RoIGlzIGxlc3MgdGhhbiA0IGNoYXJzJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBoYW5kbGVyOiBtYXhMZW5ndGgsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhlIGxlbmd0aCBpcyBtb3JlIHRoYW4gMTYgY2hhcnMnXG4gICAgICAgIH1cbiAgICBdXG59KTtcblxuY29uc3QgcGFzc3dvcmRFbGVtID0gbmV3IEZvcm1FbGVtKHtcbiAgICBodG1sOiBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ibG9jayBjbGVhcmZpeFwiPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgaWQ9XCJsb2dpbi1wYXNzd29yZFwiIHBsYWNlaG9sZGVyPVwiUGFzc3dvcmRcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm1lbGVtLWVycm9yc1wiPjwvZGl2PmAsXG4gICAgaW5wdXQ6IHsgc2VsZWN0b3I6ICcuaW5wdXQtYmxvY2sgaW5wdXQnLCB2YWx1ZTogbnVsbCB9LFxuICAgIGVycm9yczoge1xuICAgICAgICBlbGVtQ2xhc3M6ICdmb3JtZWxlbS1lcnJvcnMnXG4gICAgfSxcbiAgICB2YWxpZGF0b3JzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGhhbmRsZXI6IG1pbkxlbmd0aCxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgbGVuZ3RoIGlzIGxlc3MgdGhhbiA0IGNoYXJzJ1xuICAgICAgICB9XG4gICAgXVxufSk7XG5cbmNvbnN0IExvZ2luRm9ybSA9IG5ldyBGb3JtKHtcbiAgICBuYW1lOiAnbG9naW4nLFxuICAgIGh0bWw6IGBcbiAgICAgICAgPGZvcm0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXRzXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJMb2cgaW5cIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgYCxcbiAgICBlbGVtczoge1xuICAgICAgICAnbG9naW4nOiBsb2dpbkVsZW0sXG4gICAgICAgICdwdyc6IHBhc3N3b3JkRWxlbVxuICAgIH0sIFxuICAgIHdoZXJlVG9QdXQ6ICcuaW5wdXRzJyxcbiAgICBzdWJtaXQ6IHtcbiAgICAgICAgaGFuZGxlcjogZWxlbXMgPT4ge1xuICAgICAgICAgICAgY29uc3QgaHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgICBodHRwLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnd2UgcmUgbG9naW5uaW5nJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaHR0cC5vcGVuKCdQT1NUJywgJy9hcGkvbG9naW4nLCB0cnVlKTtcbiAgICAgICAgICAgIGh0dHAuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICAgIGh0dHAuc2VuZChKU09OLnN0cmluZ2lmeSh7bG9naW46IGVsZW1zLmxvZ2luLCBwdzogZWxlbXMucHd9KSk7XG4gICAgICAgIH0sXG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTG9naW5Gb3JtO1xufSx7XCJjc3AtYXBwL2xpYnMvZm9ybXNcIjo5LFwiY3NwLWFwcC9saWJzL2Zvcm1zL3V0aWxpdGllcy92YWxpZGF0b3JzXCI6MTB9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmNvbnN0IHsgTG9naW5Gb3JtLCBTaWdudXBDbGllbnRGb3JtLCBTaWdudXBFeGVjRm9ybSB9ID0gcmVxdWlyZSgnLi9mb3JtcycpO1xuXG5jb25zdCBoaWRlQ2xhc3MgPSAnZGlzcGxheS1ub25lJztcblxuY29uc3QgU3RhcnRQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5odG1sID0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwid3JhcHBlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXJ0cGFnZVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2dvLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMT5XZWxjb21lIHRvIENvbnN1bHRpbmcgU2VydmljZXMgUGxhdGZvcm08L2gxPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1haW4tYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwibG9naW4tc3dpdGNoXCI+TG9nIGluPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJzaWdudXAtc3dpdGNoXCI+U2lnbiB1cDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvZ2luXCIgaWQ9XCJsb2dpblwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+PGgyPkxvZyBpbjwvaDI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2dpbi1mb3JtIGZvcm1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2lnbnVwXCIgaWQ9XCJzaWdudXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1hY3Rpb25zIGNsZWFyZml4XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiY2xpZW50LXN3aXRjaFwiPlNpZ24gdXAgYXMgY2xpZW50PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiZXhlYy1zd2l0Y2hcIj5TaWduIHVwIGFzIGV4ZWN1dG9yPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzaWdudXAtZm9ybVwiIGlkPVwic2lnbnVwLWZvcm1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjbGllbnQtZm9ybSBmb3JtXCIgaWQ9XCJjbGllbnQtZm9ybVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImV4ZWMtZm9ybSBmb3JtXCIgaWQ9XCJleGVjLWZvcm1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgYDtcbiAgICB0aGlzLmZvcm1zID0ge1xuICAgICAgICBbTG9naW5Gb3JtLm5hbWVdOiBMb2dpbkZvcm0sXG4gICAgICAgIFtTaWdudXBDbGllbnRGb3JtLm5hbWVdOiBTaWdudXBDbGllbnRGb3JtLFxuICAgICAgICBbU2lnbnVwRXhlY0Zvcm0ubmFtZV06IFNpZ251cEV4ZWNGb3JtXG4gICAgfTtcbiAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5jcmVhdGVET00odGhpcy5odG1sKTtcbiAgICB0aGlzLndoZXJlVG9QdXQgPSB7XG4gICAgICAgIFtMb2dpbkZvcm0ubmFtZV06ICcubG9naW4tZm9ybScsXG4gICAgICAgIFtTaWdudXBDbGllbnRGb3JtLm5hbWVdOiAnLmNsaWVudC1mb3JtJyxcbiAgICAgICAgW1NpZ251cEV4ZWNGb3JtLm5hbWVdOiAnLmV4ZWMtZm9ybSdcbiAgICB9O1xuICAgIHRoaXMuZWxlbXMgPSB7XG4gICAgICAgIGxvZ2luQnRuOiB0aGlzLmZyYWdtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2dpbi1zd2l0Y2gnKSxcbiAgICAgICAgc2lnbnVwQnRuOiB0aGlzLmZyYWdtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWdudXAtc3dpdGNoJyksXG4gICAgICAgIGxvZ2luUGFydDogdGhpcy5mcmFnbWVudC5xdWVyeVNlbGVjdG9yKCcjbG9naW4nKSxcbiAgICAgICAgc2lnbnVwUGFydDogdGhpcy5mcmFnbWVudC5xdWVyeVNlbGVjdG9yKCcjc2lnbnVwJyksXG4gICAgICAgIGNsaWVudEJ0bjogdGhpcy5mcmFnbWVudC5xdWVyeVNlbGVjdG9yKCcjY2xpZW50LXN3aXRjaCcpLFxuICAgICAgICBleGVjQnRuOiB0aGlzLmZyYWdtZW50LnF1ZXJ5U2VsZWN0b3IoJyNleGVjLXN3aXRjaCcpLFxuICAgICAgICBjbGllbnRQYXJ0OiB0aGlzLmZyYWdtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjbGllbnQtZm9ybScpLFxuICAgICAgICBleGVjUGFydDogdGhpcy5mcmFnbWVudC5xdWVyeVNlbGVjdG9yKCcjZXhlYy1mb3JtJyksXG4gICAgICAgIC8vIFNpZ24gVXAgcGFydFxuICAgICAgICBzaWdudXBUYWIxOiB0aGlzLmZyYWdtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWdudXAgLnRhYi1hY3Rpb25zIGJ1dHRvbjpmaXJzdC1jaGlsZCcpLFxuICAgICAgICBzaWdudXBUYWIyOiB0aGlzLmZyYWdtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWdudXAgLnRhYi1hY3Rpb25zIGJ1dHRvbjpsYXN0LWNoaWxkJyksXG4gICAgICAgIHNpZ251cFBhcnRGb3JtOiB0aGlzLmZyYWdtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaWdudXAtZm9ybScpXG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmluc2VydEZvcm1zKCk7XG4gICAgdGhpcy5pbml0aWFsaXplRXZlbnRzKCk7XG4gICAgdGhpcy5zZXREZWZhdWx0U3RhdGUoKTtcbn07XG5cblN0YXJ0UGFnZS5wcm90b3R5cGUuY3JlYXRlRE9NID0gZnVuY3Rpb24oaHRtbCkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGNvbnN0IHRtcEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0bXBFbGVtLmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICBjb25zdCBlbGVtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRtcEVsZW0uY2hpbGRyZW4pO1xuICAgIGVsZW1zLmZvckVhY2goZWxlbSA9PiBmcmFnbWVudC5hcHBlbmRDaGlsZChlbGVtKSk7XG5cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG59O1xuXG5TdGFydFBhZ2UucHJvdG90eXBlLmluc2VydEZvcm1zID0gZnVuY3Rpb24oKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy53aGVyZVRvUHV0KS5mb3JFYWNoKGZvcm1OYW1lID0+IHtcbiAgICAgICAgdGhpcy5mcmFnbWVudFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy53aGVyZVRvUHV0W2Zvcm1OYW1lXSlcbiAgICAgICAgICAgIC5hcHBlbmRDaGlsZCh0aGlzLmZvcm1zW2Zvcm1OYW1lXS5mcmFnbWVudCk7XG4gICAgfSk7XG59O1xuXG5TdGFydFBhZ2UucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmVsZW1zLmxvZ2luQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZ0ID0+IHtcbiAgICAgICAgdGhpcy5lbGVtcy5sb2dpblBhcnQuY2xhc3NMaXN0LnJlbW92ZShoaWRlQ2xhc3MpO1xuICAgICAgICB0aGlzLmVsZW1zLnNpZ251cFBhcnQuY2xhc3NMaXN0LmFkZChoaWRlQ2xhc3MpO1xuXG4gICAgICAgIHRoaXMuZWxlbXMubG9naW5CdG4uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuZWxlbXMuc2lnbnVwQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH0pO1xuICAgIHRoaXMuZWxlbXMuc2lnbnVwQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZ0ID0+IHtcbiAgICAgICAgdGhpcy5lbGVtcy5zaWdudXBQYXJ0LmNsYXNzTGlzdC5yZW1vdmUoaGlkZUNsYXNzKTtcbiAgICAgICAgdGhpcy5lbGVtcy5sb2dpblBhcnQuY2xhc3NMaXN0LmFkZChoaWRlQ2xhc3MpO1xuXG4gICAgICAgIHRoaXMuZWxlbXMuc2lnbnVwQnRuLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLmVsZW1zLmxvZ2luQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH0pO1xuICAgIHRoaXMuZWxlbXMuY2xpZW50QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZ0ID0+IHtcbiAgICAgICAgdGhpcy5lbGVtcy5jbGllbnRQYXJ0LmNsYXNzTGlzdC5yZW1vdmUoaGlkZUNsYXNzKTtcbiAgICAgICAgdGhpcy5lbGVtcy5leGVjUGFydC5jbGFzc0xpc3QuYWRkKGhpZGVDbGFzcyk7XG5cbiAgICAgICAgdGhpcy5lbGVtcy5jbGllbnRCdG4uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuZWxlbXMuZXhlY0J0bi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB9KTtcbiAgICB0aGlzLmVsZW1zLmV4ZWNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldnQgPT4ge1xuICAgICAgICB0aGlzLmVsZW1zLmV4ZWNQYXJ0LmNsYXNzTGlzdC5yZW1vdmUoaGlkZUNsYXNzKTtcbiAgICAgICAgdGhpcy5lbGVtcy5jbGllbnRQYXJ0LmNsYXNzTGlzdC5hZGQoaGlkZUNsYXNzKTtcblxuICAgICAgICB0aGlzLmVsZW1zLmV4ZWNCdG4uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuZWxlbXMuY2xpZW50QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH0pO1xuICAgIHRoaXMuZWxlbXMuc2lnbnVwVGFiMS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbGVtcy5zaWdudXBUYWIxLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLmVsZW1zLnNpZ251cFRhYjIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuZWxlbXMuc2lnbnVwUGFydEZvcm0uY2xhc3NMaXN0LmFkZCgnZmlyc3QtdGFiLWFjdGl2ZScpO1xuICAgICAgICB0aGlzLmVsZW1zLnNpZ251cFBhcnRGb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ2xhc3QtdGFiLWFjdGl2ZScpO1xuICAgIH0pO1xuICAgIHRoaXMuZWxlbXMuc2lnbnVwVGFiMi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbGVtcy5zaWdudXBUYWIyLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLmVsZW1zLnNpZ251cFRhYjEuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuZWxlbXMuc2lnbnVwUGFydEZvcm0uY2xhc3NMaXN0LmFkZCgnbGFzdC10YWItYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuZWxlbXMuc2lnbnVwUGFydEZvcm0uY2xhc3NMaXN0LnJlbW92ZSgnZmlyc3QtdGFiLWFjdGl2ZScpO1xuICAgIH0pO1xufTtcblxuU3RhcnRQYWdlLnByb3RvdHlwZS5zZXREZWZhdWx0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmVsZW1zLnNpZ251cFBhcnQuY2xhc3NMaXN0LmFkZChoaWRlQ2xhc3MpO1xuICAgIHRoaXMuZWxlbXMuZXhlY1BhcnQuY2xhc3NMaXN0LmFkZChoaWRlQ2xhc3MpO1xuICAgIHRoaXMuZWxlbXMubG9naW5CdG4uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgdGhpcy5lbGVtcy5jbGllbnRCdG4uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgdGhpcy5lbGVtcy5zaWdudXBUYWIxLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIHRoaXMuZWxlbXMuc2lnbnVwUGFydEZvcm0uY2xhc3NMaXN0LmFkZCgnZmlyc3QtdGFiLWFjdGl2ZScpO1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTdGFydFBhZ2UoKTtcbn0se1wiLi9mb3Jtc1wiOjR9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgaHRtbCxcbiAgICAgICAgZWxlbXM6IFtdLFxuICAgICAgICB3aGVyZVRvUHV0OiAnJyxcbiAgICAgICAgc3VibWl0XG4gICAgfVxuKi9cblxuY29uc3QgRm9ybSA9IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG4gICAgdGhpcy5uYW1lID0gc2V0dGluZ3MubmFtZTtcbiAgICB0aGlzLmh0bWwgPSBzZXR0aW5ncy5odG1sO1xuICAgIHRoaXMuZWxlbXMgPSBzZXR0aW5ncy5lbGVtcztcbiAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5jcmVhdGVET00oKTtcbiAgICB0aGlzLndoZXJlVG9QdXQgPSBzZXR0aW5ncy53aGVyZVRvUHV0IHx8ICdmb3JtJztcbiAgICB0aGlzLnN1Ym1pdCA9IHtcbiAgICAgICAgc2VsZWN0b3I6IHNldHRpbmdzLnN1Ym1pdC5zZWxlY3RvciB8fCAnaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScsXG4gICAgICAgIGhhbmRsZXI6IHNldHRpbmdzLnN1Ym1pdC5oYW5kbGVyIHx8IGZ1bmN0aW9uKCl7fVxuICAgIH07XG5cbiAgICB0aGlzLmluc2VydEVsZW1zKCk7XG4gICAgdGhpcy5pbml0aWFsaXplRXZlbnRzKCk7XG59O1xuXG5Gb3JtLnByb3RvdHlwZS5jcmVhdGVET00gPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBjb25zdCB0bXBFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdG1wRWxlbS5pbm5lckhUTUwgPSB0aGlzLmh0bWw7XG5cbiAgICBjb25zdCBlbGVtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRtcEVsZW0uY2hpbGRyZW4pO1xuICAgIGVsZW1zLmZvckVhY2goZWxlbSA9PiBmcmFnbWVudC5hcHBlbmRDaGlsZChlbGVtKSk7XG5cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG59O1xuXG5Gb3JtLnByb3RvdHlwZS5pbnNlcnRFbGVtcyA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHBsYWNlID0gdGhpcy5mcmFnbWVudC5xdWVyeVNlbGVjdG9yKHRoaXMud2hlcmVUb1B1dCk7XG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLmVsZW1zKS5mb3JFYWNoKGVsZW0gPT4gcGxhY2UuYXBwZW5kQ2hpbGQoZWxlbS5mcmFnbWVudCkpO1xufTtcblxuRm9ybS5wcm90b3R5cGUuaW5pdGlhbGl6ZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIHRoaXMuZnJhZ21lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnN1Ym1pdC5zZWxlY3RvcikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldnQgPT4ge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zdWJtaXQuaGFuZGxlcih0aGlzLmVsZW1zKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRm9ybTtcbn0se31dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLypcbiAgICBzZXR0aW5ncyBvYmplY3QgaGFzIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuICAgIHNldHRpbmdzID0ge1xuICAgICAgICBodG1sLFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgc2VsZWN0b3IsIHZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcnM6IFtcbiAgICAgICAgICAgIHt2YWxpZGF0b3IsIG1lc3NhZ2V9IC4uLlxuICAgICAgICBdLFxuICAgICAgICBlcnJvcnMgPSB7XG4gICAgICAgICAgICBlbGVtQ2xhc3MsIGhpZGluZ0NsYXNzXG4gICAgICAgIH1cbiAgICB9XG4qL1xuXG5jb25zdCBGb3JtRWxlbSA9IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG4gICAgdGhpcy52YWx1ZSA9IHNldHRpbmdzLmlucHV0LnZhbHVlIHx8IG51bGw7XG4gICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuY3JlYXRlRE9NKHNldHRpbmdzLmh0bWwpO1xuICAgIHRoaXMuZWxlbSA9IHRoaXMuZnJhZ21lbnQucXVlcnlTZWxlY3RvcihzZXR0aW5ncy5pbnB1dC5zZWxlY3RvcikgfHwgbnVsbDtcbiAgICB0aGlzLnZhbGlkYXRvcnMgPSBzZXR0aW5ncy52YWxpZGF0b3JzIHx8IFtdO1xuICAgIHRoaXMuZXJyb3JzID0ge1xuICAgICAgICBlbGVtOiB0aGlzLmZyYWdtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgc2V0dGluZ3MuZXJyb3JzLmVsZW1DbGFzcykgfHwgbnVsbCxcbiAgICAgICAgaGlkaW5nQ2xhc3M6IHNldHRpbmdzLmVycm9ycy5oaWRpbmdDbGFzcyB8fCAnLm5vbmUnLFxuICAgICAgICBtZXNzYWdlczogW11cbiAgICB9O1xuXG4gICAgdGhpcy5pbml0aWFsaXplRXZlbnRzKCk7XG59O1xuXG5Gb3JtRWxlbS5wcm90b3R5cGUuY3JlYXRlRE9NID0gZnVuY3Rpb24oaHRtbCkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGNvbnN0IHRtcEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0bXBFbGVtLmlubmVySFRNTCA9IGh0bWw7XG5cbiAgICBjb25zdCBlbGVtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRtcEVsZW0uY2hpbGRyZW4pO1xuICAgIGVsZW1zLmZvckVhY2goZWxlbSA9PiBmcmFnbWVudC5hcHBlbmRDaGlsZChlbGVtKSlcblxuICAgIHJldHVybiBmcmFnbWVudDtcbn07XG5cbkZvcm1FbGVtLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGV2dCA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3JzLm1lc3NhZ2VzID0gW107XG4gICAgICAgIFxuICAgICAgICB0aGlzLnZhbGlkYXRvcnMuZm9yRWFjaCh2YWxpZGF0b3IgPT4ge1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0b3IuaGFuZGxlcih0aGlzLmVsZW0udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMubWVzc2FnZXMucHVzaCh2YWxpZGF0b3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmVycm9ycy5tZXNzYWdlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlRXJyb3JzKCk7XG4gICAgICAgICAgICB0aGlzLmVycm9ycy5lbGVtLmlubmVySFRNTCA9ICcnO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyAoZXZ0LnRhcmdldC52YWx1ZSlcbiAgICAgICAgdGhpcy52YWx1ZSA9IGV2dC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubGlzdEVycm9ycygpO1xuICAgICAgICB0aGlzLnNob3dFcnJvcnMoKTtcbiAgICB9KTtcbn07XG5cbkZvcm1FbGVtLnByb3RvdHlwZS5zaG93RXJyb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZXJyb3JzLmVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuZXJyb3JzLmhpZGluZ0NsYXNzKSkge1xuICAgICAgICB0aGlzLmVycm9ycy5lbGVtLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5lcnJvcnMuaGlkaW5nQ2xhc3MpO1xuICAgIH1cbn07XG5cbkZvcm1FbGVtLnByb3RvdHlwZS5oaWRlRXJyb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLmVycm9ycy5lbGVtLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmVycm9ycy5oaWRpbmdDbGFzcykpIHtcbiAgICAgICAgdGhpcy5lcnJvcnMuZWxlbS5jbGFzc0xpc3QuYWRkKHRoaXMuZXJyb3JzLmhpZGluZ0NsYXNzKTtcbiAgICB9XG59O1xuXG5Gb3JtRWxlbS5wcm90b3R5cGUubGlzdEVycm9ycyA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIHRoaXMuZXJyb3JzLm1lc3NhZ2VzLmZvckVhY2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgIGxpLnRleHRDb250ZW50ID0gZXJyb3I7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGxpKTtcbiAgICB9KTtcbiAgICB0aGlzLmVycm9ycy5lbGVtLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZXJyb3JzLmVsZW0uYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtRWxlbTtcbn0se31dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuY29uc3QgRm9ybSA9IHJlcXVpcmUoJ2NzcC1hcHAvbGlicy9mb3Jtcy9Gb3JtJyk7XG5jb25zdCBGb3JtRWxlbSA9IHJlcXVpcmUoJ2NzcC1hcHAvbGlicy9mb3Jtcy9Gb3JtRWxlbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBGb3JtLFxuICAgIEZvcm1FbGVtXG59O1xufSx7XCJjc3AtYXBwL2xpYnMvZm9ybXMvRm9ybVwiOjcsXCJjc3AtYXBwL2xpYnMvZm9ybXMvRm9ybUVsZW1cIjo4fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuY29uc3QgbWluTGVuZ3RoID0gZnVuY3Rpb24obWluKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnRvU3RyaW5nKCkubGVuZ3RoID49IG1pbjtcbiAgICB9O1xufTtcblxuY29uc3QgbWF4TGVuZ3RoID0gZnVuY3Rpb24obWF4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnRvU3RyaW5nKCkubGVuZ3RoIDw9IG1heDtcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbWluTGVuZ3RoLFxuICAgIG1heExlbmd0aFxufTtcbn0se31dfSx7fSxbMV0pO1xuIl19
